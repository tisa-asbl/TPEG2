syntax = "proto3";

package tpeg.datatypes;

// Constructed for TPEG to protobuf conversion
// This is an encoding specific data type used for encoding an array of bits. The bits are encoded in a sequence of bytes, where the first bit of each byte is a continuation flag (shown as c in the figure [BitArray] below). If this bit is set (=1) there follows at least one more byte in this bit array. The last byte always has this bit cleared (=0). A BitArray represents a list of Boolean values which is implemented in the same way as for all lists. The first byte holds bits numbered from zero to six in that order. The second byte holds bits numbered seven to 13, again in that order, and so on. The ordering is sequential from first to last bit. This use, to ensure consistency with other lists, differs from the encoding of numeric values which use a Big-endian bit and byte order.
message BitArray {
	// selector indicating presence or absence of element. 
	// Absent selectors (beyond end of list) to be taken as absence.
	repeated bool selector = 1;
}

message MajorMinorVersion {
	// Major version in range 0-15.
	uint32 majorVersion = 1;
	// Minor version in range 0-15.
	uint32 minorVersion = 2;
}
// A DaySelector attribute can be used to select one or more week days. The Boolean attributes indicate whether a particular day is included in the selection, if the attribute value is true, the day is selected. These seven attributes are mandatory Booleans, encoded using a BitArray.
message DaySelector {
	// Set to true to select every saturday.
	bool saturday = 1;
	// Set to true to select every friday.
	bool friday = 2;
	// Set to true to select every thursday.
	bool thursday = 3;
	// Set to true to select every wednesday.
	bool wednesday = 4;
	// Set to true to select every tuesday.
	bool tuesday = 5;
	// Set to true to select every monday.
	bool monday = 6;
	// Set to true to select every sunday.
	bool sunday = 7;
}
// A short string accompanied with a language code that identifies the language that the string is given in.
message LocalisedShortString {
	// Specifies the language used for this string.
	Typ001_LanguageCode languageCode = 1;
	// The actual string.
	string string = 2;
}
// A long string accompanied with a language code that identifies the language that the string is given in.
message LocalisedLongString {
	// Specifies the language used for this string.
	Typ001_LanguageCode languageCode = 1;
	// The actual string.
	string string = 2;
}
// The TimeInterval data structure can be used when an interval in time must be specified with more flexibility than the simple Duration type allows.
// Each TimeInterval attribute has a number of optional attributes. It is maximally 101 years long. In XML this is encoded as xs:duration. And in binary each attribute can be used as stand-alone attribute or in combination with other attributes. When an attribute is not given, the value zero is implied. Every TimeInterval must specify at least one attribute.
message TimeInterval {
	// Number of years between 0 and 100.
	optional uint32 years = 1;
	// Number of months between 0 and twelve.
	optional uint32 months = 2;
	// Number of days between 0 and 31.
	optional uint32 days = 3;
	// Number of hours between 0 and 24.
	optional uint32 hours = 4;
	// Number of minutes between 0 and 60.
	optional uint32 minutes = 5;
	// Number of seconds between 0 and 60.
	optional uint32 seconds = 6;
}
// The TimePoint data structure can be used when a point in time must be specified with less granularity than the simple DateTime allows. Each TimePoint attribute has a number of optional attributes. Each attribute can be used as stand-alone attribute or in combination with other attributes. Every TimePoint must specify at least one attribute.
// In XML, a TimePoint is encoded as follows:
// TODO: Insert XSD snippet
//  
//    ExampleXML
//  
//  
//   every January every day at 23 hours
//   &lt;TimePoint month="1" hour="23"/&gt;
//  
//   January 2009
//   %lt;TimePoint year="2009" month="1"/&gt;
//  
//   Use of an opening time of ten o'clock am every day in a hypothetical application
//   
// &lt;OpeningTime&gt;
//  &lt;TimePoint hour="10"/&gt;
// &lt;/OpeningTime&gt;
//  
//   Use of a closing time of eight o'clock pm every day in a hypothetical application
//   
// &lt;ClosingTime&gt;
//  &lt;TimePoint hour="20"/&gt;
// &lt;/ClosingTime&gt;
//  
//  In binary encoding, 1970 is subtracted from the year, mapping the range 1970-2100 to the values 0-130.
message TimePoint {
	// The year between 1970 and 2100.
	optional uint32 year = 1;
	// The month between one and twelve.
	optional uint32 month = 2;
	// The day between one and 31.
	optional uint32 day = 3;
	// The hour between 0 and 23.
	optional uint32 hour = 4;
	// The minute between 0 and 59.
	optional uint32 minute = 5;
	// The second between 0 and 59.
	optional uint32 second = 6;
}
// The time toolkit allows different date and time information to be described. For example where an event has a start but no known end-time. In such a case we should used only a start point but omit and end-time. Each TimeToolkit attribute has a number of optional attributes. Each attribute can be used as stand-alone attribute or in combination with other attributes. Every TimeToolkit must specify at least one attribute.
// In XML the TimeToolkit is encoded as follows:
// TODO: Insert XSD snippet
//  NB! For a timestamp the DateTime type should be used.
message TimeToolkit {
	// An event time point (e.g. flight departure) or an event start time (e.g. open from).
	optional TimePoint startTime = 1;
	// An event stop time (e.g. open to). The stop time can be used only together with a start time.
	optional TimePoint stopTime = 2;
	// A time interval (e.g. free parking limit).
	optional TimeInterval duration = 3;
	// Relevant days of a certain type (e.g. weekdays or holiday).
	optional Typ002_SpecialDay specialDay = 4;
	// Gives the option to specify days of the week.
	optional DaySelector daySelector = 5;
}
// Represents a signed integer value in the range -2147483648 and 2147483647. In XML it is encoded as xs:int. In binary, these values are encoded as signed 32 bit integers.
message IntSiLo {
}
// A service identifier is an abstract data type that defines a single service identifier, in XML it is encoded as a dotted string i.j.k where i, j and k are the three parts of the service identifier respectively. The data type is derived from xs:string and has the added pattern restriction ^(((25[0-5])|(2[0-4][0-9])|([0-1][0-9]{2})|([0-9][0-9])|([0-9]))\.){2}((25[0-5])|(2[0-4][0-9])|([0-1][0-9]{2})|([0-9][0-9])|([0-9])). In binary, a service identifier is encoded as a sequence of three IntUnTi values.
message ServiceIdentifier {
}
// ISO 639: 2002 - Codes for the representation of names of languages. The comment column lists the two-letter codes of 639-1.
enum Typ001_LanguageCode {

	TYP001_LANGUAGECODE_UNKNOWN = 0;
	// aa
	TYP001_LANGUAGECODE_AFAR = 1;
	// ab
	TYP001_LANGUAGECODE_ABKHAZIAN = 2;
	// ae
	TYP001_LANGUAGECODE_AVESTAN = 3;
	// af
	TYP001_LANGUAGECODE_AFRIKAANS = 4;
	// ak
	TYP001_LANGUAGECODE_AKAN = 5;
	// am
	TYP001_LANGUAGECODE_AMHARIC = 6;
	// an
	TYP001_LANGUAGECODE_ARAGONESE = 7;
	// ar
	TYP001_LANGUAGECODE_ARABIC = 8;
	// as
	TYP001_LANGUAGECODE_ASSAMESE = 9;
	// av
	TYP001_LANGUAGECODE_AVARIC = 10;
	// ay
	TYP001_LANGUAGECODE_AYMARA = 11;
	// az
	TYP001_LANGUAGECODE_AZERBAIJANI = 12;
	// ba
	TYP001_LANGUAGECODE_BASHKIR = 13;
	// be
	TYP001_LANGUAGECODE_BELARUSIAN = 14;
	// bg
	TYP001_LANGUAGECODE_BULGARIAN = 15;
	// bh
	TYP001_LANGUAGECODE_BIHARI = 16;
	// bi
	TYP001_LANGUAGECODE_BISLAMA = 17;
	// bm
	TYP001_LANGUAGECODE_BAMBARA = 18;
	// bn
	TYP001_LANGUAGECODE_BENGALI = 19;
	// bo
	TYP001_LANGUAGECODE_TIBETAN = 20;
	// br
	TYP001_LANGUAGECODE_BRETON = 21;
	// bs
	TYP001_LANGUAGECODE_BOSNIAN = 22;
	// ca
	TYP001_LANGUAGECODE_CATALAN = 23;
	// ce
	TYP001_LANGUAGECODE_CHECHEN = 24;
	// ch
	TYP001_LANGUAGECODE_CHAMORRO = 25;
	// co
	TYP001_LANGUAGECODE_CORSICAN = 26;
	// cr
	TYP001_LANGUAGECODE_CREE = 27;
	// cs
	TYP001_LANGUAGECODE_CZECH = 28;
	// cu
	TYP001_LANGUAGECODE_CHURCH_SLAVIC = 29;
	// cv
	TYP001_LANGUAGECODE_CHUVASH = 30;
	// cy
	TYP001_LANGUAGECODE_WELSH = 31;
	// da
	TYP001_LANGUAGECODE_DANISH = 32;
	// de
	TYP001_LANGUAGECODE_GERMAN = 33;
	// dv
	TYP001_LANGUAGECODE_DIVEHI = 34;
	// dz
	TYP001_LANGUAGECODE_DZONGKHA = 35;
	// ee
	TYP001_LANGUAGECODE_EWE = 36;
	// el
	TYP001_LANGUAGECODE_GREEK = 37;
	// en
	TYP001_LANGUAGECODE_ENGLISH = 38;
	// eo
	TYP001_LANGUAGECODE_ESPERANTO = 39;
	// es
	TYP001_LANGUAGECODE_SPANISH = 40;
	// et
	TYP001_LANGUAGECODE_ESTONIAN = 41;
	// eu
	TYP001_LANGUAGECODE_BASQUE = 42;
	// fa
	TYP001_LANGUAGECODE_PERSIAN = 43;
	// ff
	TYP001_LANGUAGECODE_FULAH = 44;
	// fi
	TYP001_LANGUAGECODE_FINNISH = 45;
	// fj
	TYP001_LANGUAGECODE_FIJIAN = 46;
	// fo
	TYP001_LANGUAGECODE_FAROESE = 47;
	// fr
	TYP001_LANGUAGECODE_FRENCH = 48;
	// fy
	TYP001_LANGUAGECODE_WESTERN_FRISIAN = 49;
	// ga
	TYP001_LANGUAGECODE_IRISH = 50;
	// gd
	TYP001_LANGUAGECODE_SCOTTISH_GAELIC = 51;
	// gl
	TYP001_LANGUAGECODE_GALICIAN = 52;
	// gn
	TYP001_LANGUAGECODE_GUARAN = 53;
	// gu
	TYP001_LANGUAGECODE_GUJARATI = 54;
	// gv
	TYP001_LANGUAGECODE_MANX = 55;
	// ha
	TYP001_LANGUAGECODE_HAUSA = 56;
	// he
	TYP001_LANGUAGECODE_HEBREW = 57;
	// hi
	TYP001_LANGUAGECODE_HINDI = 58;
	// ho
	TYP001_LANGUAGECODE_HIRI_MOTU = 59;
	// hr
	TYP001_LANGUAGECODE_CROATIAN = 60;
	// ht
	TYP001_LANGUAGECODE_HAITIAN = 61;
	// hu
	TYP001_LANGUAGECODE_HUNGARIAN = 62;
	// hy
	TYP001_LANGUAGECODE_ARMENIAN = 63;
	// hz
	TYP001_LANGUAGECODE_HERERO = 64;
	// ia
	TYP001_LANGUAGECODE_INTERLINGUA_INTERNATIONAL_AUXILIARY_LANGUAGE_ASSOCIATION = 65;
	// id
	TYP001_LANGUAGECODE_INDONESIAN = 66;
	// ie
	TYP001_LANGUAGECODE_INTERLINGUE = 67;
	// ig
	TYP001_LANGUAGECODE_IGBO = 68;
	// ii
	TYP001_LANGUAGECODE_SICHUAN_YI = 69;
	// ik
	TYP001_LANGUAGECODE_INUPIAQ = 70;
	// io
	TYP001_LANGUAGECODE_IDO = 71;
	// is
	TYP001_LANGUAGECODE_ICELANDIC = 72;
	// it
	TYP001_LANGUAGECODE_ITALIAN = 73;
	// iu
	TYP001_LANGUAGECODE_INUKTITUT = 74;
	// ja
	TYP001_LANGUAGECODE_JAPANESE = 75;
	// jv
	TYP001_LANGUAGECODE_JAVANESE = 76;
	// ka
	TYP001_LANGUAGECODE_GEORGIAN = 77;
	// kg
	TYP001_LANGUAGECODE_KONGO = 78;
	// ki
	TYP001_LANGUAGECODE_KIKUYU = 79;
	// kj
	TYP001_LANGUAGECODE_KUANYAMA = 80;
	// kk
	TYP001_LANGUAGECODE_KAZAKH = 81;
	// kl
	TYP001_LANGUAGECODE_KALAALLISUT = 82;
	// km
	TYP001_LANGUAGECODE_KHMER = 83;
	// kn
	TYP001_LANGUAGECODE_KANNADA = 84;
	// ko
	TYP001_LANGUAGECODE_KOREAN = 85;
	// kr
	TYP001_LANGUAGECODE_KANURI = 86;
	// ks
	TYP001_LANGUAGECODE_KASHMIRI = 87;
	// ku
	TYP001_LANGUAGECODE_KURDISH = 88;
	// kv
	TYP001_LANGUAGECODE_KOMI = 89;
	// kw
	TYP001_LANGUAGECODE_CORNISH = 90;
	// ky
	TYP001_LANGUAGECODE_KIRGHIZ = 91;
	// la
	TYP001_LANGUAGECODE_LATIN = 92;
	// lb
	TYP001_LANGUAGECODE_LUXEMBOURGISH = 93;
	// lg
	TYP001_LANGUAGECODE_GANDA = 94;
	// li
	TYP001_LANGUAGECODE_LIMBURGISH = 95;
	// ln
	TYP001_LANGUAGECODE_LINGALA = 96;
	// lo
	TYP001_LANGUAGECODE_LAO = 97;
	// lt
	TYP001_LANGUAGECODE_LITHUANIAN = 98;
	// lu
	TYP001_LANGUAGECODE_LUBA_KATANGA = 99;
	// lv
	TYP001_LANGUAGECODE_LATVIAN = 100;
	// mg
	TYP001_LANGUAGECODE_MALAGASY = 101;
	// mh
	TYP001_LANGUAGECODE_MARSHALLESE = 102;
	// mi
	TYP001_LANGUAGECODE_MA_ORI = 103;
	// mk /sl ?
	TYP001_LANGUAGECODE_MACEDONIAN = 104;
	// ml
	TYP001_LANGUAGECODE_MALAYALAM = 105;
	// mn
	TYP001_LANGUAGECODE_MONGOLIAN = 106;
	// mo
	TYP001_LANGUAGECODE_MOLDAVIAN = 107;
	// mr
	TYP001_LANGUAGECODE_MARATHI = 108;
	// ms
	TYP001_LANGUAGECODE_MALAY = 109;
	// mt
	TYP001_LANGUAGECODE_MALTESE = 110;
	// my
	TYP001_LANGUAGECODE_BURMESE = 111;
	// na
	TYP001_LANGUAGECODE_NAURU = 112;
	// nb
	TYP001_LANGUAGECODE_NORWEGIAN_BOKML = 113;
	// nd
	TYP001_LANGUAGECODE_NORTH_NDEBELE = 114;
	// ne
	TYP001_LANGUAGECODE_NEPALI = 115;
	// ng
	TYP001_LANGUAGECODE_NDONGA = 116;
	// nl
	TYP001_LANGUAGECODE_DUTCH = 117;
	// nn
	TYP001_LANGUAGECODE_NORWEGIAN_NYNORSK = 118;
	// no
	TYP001_LANGUAGECODE_NORWEGIAN = 119;
	// nr
	TYP001_LANGUAGECODE_SOUTH_NDEBELE = 120;
	// nv
	TYP001_LANGUAGECODE_NAVAJO = 121;
	// ny
	TYP001_LANGUAGECODE_CHICHEWA = 122;
	// oc
	TYP001_LANGUAGECODE_OCCITAN = 123;
	// oj
	TYP001_LANGUAGECODE_OJIBWA = 124;
	// om
	TYP001_LANGUAGECODE_OROMO = 125;
	// or
	TYP001_LANGUAGECODE_ORIYA = 126;
	// os
	TYP001_LANGUAGECODE_OSSETIAN = 127;
	// pa
	TYP001_LANGUAGECODE_PANJABI = 128;
	// pi
	TYP001_LANGUAGECODE_PA_LI = 129;
	// pl
	TYP001_LANGUAGECODE_POLISH = 130;
	// ps
	TYP001_LANGUAGECODE_PASHTO = 131;
	// pt
	TYP001_LANGUAGECODE_PORTUGUESE = 132;
	// qu
	TYP001_LANGUAGECODE_QUECHUA = 133;
	// rm
	TYP001_LANGUAGECODE_RAETO_ROMANCE = 134;
	// rn
	TYP001_LANGUAGECODE_KIRUNDI = 135;
	// ro
	TYP001_LANGUAGECODE_ROMANIAN = 136;
	// ru
	TYP001_LANGUAGECODE_RUSSIAN = 137;
	// rw
	TYP001_LANGUAGECODE_KINYARWANDA = 138;
	// sa
	TYP001_LANGUAGECODE_SANSKRIT = 139;
	// sc
	TYP001_LANGUAGECODE_SARDINIAN = 140;
	// sd
	TYP001_LANGUAGECODE_SINDHI = 141;
	// se
	TYP001_LANGUAGECODE_NORTHERN_SAMI = 142;
	// sg
	TYP001_LANGUAGECODE_SANGO = 143;
	// sh
	TYP001_LANGUAGECODE_SERBO_CROATIAN = 144;
	// si
	TYP001_LANGUAGECODE_SINHALESE = 145;
	// sk
	TYP001_LANGUAGECODE_SLOVAK = 146;
	// sl
	TYP001_LANGUAGECODE_SLOVENIAN = 147;
	// sm
	TYP001_LANGUAGECODE_SAMOAN = 148;
	// sn
	TYP001_LANGUAGECODE_SHONA = 149;
	// so
	TYP001_LANGUAGECODE_SOMALI = 150;
	// sq
	TYP001_LANGUAGECODE_ALBANIAN = 151;
	// sr
	TYP001_LANGUAGECODE_SERBIAN = 152;
	// ss
	TYP001_LANGUAGECODE_SWATI = 153;
	// st
	TYP001_LANGUAGECODE_SOUTHERN_SOTHO = 154;
	// su
	TYP001_LANGUAGECODE_SUNDANESE = 155;
	// sv
	TYP001_LANGUAGECODE_SWEDISH = 156;
	// sw
	TYP001_LANGUAGECODE_SWAHILI = 157;
	// ta
	TYP001_LANGUAGECODE_TAMIL = 158;
	// te
	TYP001_LANGUAGECODE_TELUGU = 159;
	// tg
	TYP001_LANGUAGECODE_TAJIK = 160;
	// th
	TYP001_LANGUAGECODE_THAI = 161;
	// ti
	TYP001_LANGUAGECODE_TIGRINYA = 162;
	// tk
	TYP001_LANGUAGECODE_TURKMEN = 163;
	// tl
	TYP001_LANGUAGECODE_TAGALOG = 164;
	// tn
	TYP001_LANGUAGECODE_TSWANA = 165;
	// to
	TYP001_LANGUAGECODE_TONGA = 166;
	// tr
	TYP001_LANGUAGECODE_TURKISH = 167;
	// ts
	TYP001_LANGUAGECODE_TSONGA = 168;
	// tt
	TYP001_LANGUAGECODE_TATAR = 169;
	// tw
	TYP001_LANGUAGECODE_TWI = 170;
	// ty
	TYP001_LANGUAGECODE_TAHITIAN = 171;
	// ug
	TYP001_LANGUAGECODE_UIGHUR = 172;
	// uk
	TYP001_LANGUAGECODE_UKRAINIAN = 173;
	// ur
	TYP001_LANGUAGECODE_URDU = 174;
	// uz
	TYP001_LANGUAGECODE_UZBEK = 175;
	// ve
	TYP001_LANGUAGECODE_VENDA = 176;
	// vi
	TYP001_LANGUAGECODE_VIETNAMESE = 177;
	// vo
	TYP001_LANGUAGECODE_VOLAPK = 178;
	// wa
	TYP001_LANGUAGECODE_WALLOON = 179;
	// wo
	TYP001_LANGUAGECODE_WOLOF = 180;
	// xh
	TYP001_LANGUAGECODE_XHOSA = 181;
	// yi
	TYP001_LANGUAGECODE_YIDDISH = 182;
	// yo
	TYP001_LANGUAGECODE_YORUBA = 183;
	// za
	TYP001_LANGUAGECODE_ZHUANG = 184;
	// zh
	TYP001_LANGUAGECODE_CHINESE = 185;
	// zu
	TYP001_LANGUAGECODE_ZULU = 186;
}
// The SpecialDay table lists special types of days, such as public holiday and similar.
enum Typ002_SpecialDay {

	TYP002_SPECIALDAY_UNKNOWN = 0;

	TYP002_SPECIALDAY_WEEKDAYS = 1;

	TYP002_SPECIALDAY_WEEKENDS = 2;

	TYP002_SPECIALDAY_HOLIDAY = 3;

	TYP002_SPECIALDAY_PUBLIC_HOLIDAY = 4;

	TYP002_SPECIALDAY_RELIGIOUS_HOLIDAY = 5;

	TYP002_SPECIALDAY_FEDERAL_HOLIDAY = 6;

	TYP002_SPECIALDAY_REGIONAL_HOLIDAY = 7;

	TYP002_SPECIALDAY_NATIONAL_HOLIDAY = 8;

	TYP002_SPECIALDAY_SCHOOL_DAYS = 9;

	TYP002_SPECIALDAY_EVERY_DAY = 10;
}
// CurrencyType, based on the three-alpha codes of ISO 4217.
enum Typ003_CurrencyType {

	TYP003_CURRENCYTYPE_UNKNOWN = 0;

	TYP003_CURRENCYTYPE_AED = 1;

	TYP003_CURRENCYTYPE_AFA = 2;

	TYP003_CURRENCYTYPE_ALL = 3;

	TYP003_CURRENCYTYPE_AMD = 4;

	TYP003_CURRENCYTYPE_ANG = 5;

	TYP003_CURRENCYTYPE_AOA = 6;

	TYP003_CURRENCYTYPE_ARS = 7;

	TYP003_CURRENCYTYPE_AUD = 8;

	TYP003_CURRENCYTYPE_AWG = 9;

	TYP003_CURRENCYTYPE_AZM = 10;

	TYP003_CURRENCYTYPE_BAM = 11;

	TYP003_CURRENCYTYPE_BBD = 12;

	TYP003_CURRENCYTYPE_BDT = 13;

	TYP003_CURRENCYTYPE_BGN = 14;

	TYP003_CURRENCYTYPE_BHD = 15;

	TYP003_CURRENCYTYPE_BIF = 16;

	TYP003_CURRENCYTYPE_BMD = 17;

	TYP003_CURRENCYTYPE_BND = 18;

	TYP003_CURRENCYTYPE_BOB = 19;

	TYP003_CURRENCYTYPE_BRL = 20;

	TYP003_CURRENCYTYPE_BSD = 21;

	TYP003_CURRENCYTYPE_BTN = 22;

	TYP003_CURRENCYTYPE_BWP = 23;

	TYP003_CURRENCYTYPE_BYR = 24;

	TYP003_CURRENCYTYPE_BZD = 25;

	TYP003_CURRENCYTYPE_CAD = 26;

	TYP003_CURRENCYTYPE_CDF = 27;

	TYP003_CURRENCYTYPE_CHF = 28;

	TYP003_CURRENCYTYPE_CLP = 29;

	TYP003_CURRENCYTYPE_CNY = 30;

	TYP003_CURRENCYTYPE_COP = 31;

	TYP003_CURRENCYTYPE_CRC = 32;

	TYP003_CURRENCYTYPE_CSD = 33;

	TYP003_CURRENCYTYPE_CUP = 34;

	TYP003_CURRENCYTYPE_CVE = 35;

	TYP003_CURRENCYTYPE_CYP = 36;

	TYP003_CURRENCYTYPE_CZK = 37;

	TYP003_CURRENCYTYPE_DJF = 38;

	TYP003_CURRENCYTYPE_DKK = 39;

	TYP003_CURRENCYTYPE_DOP = 40;

	TYP003_CURRENCYTYPE_DZD = 41;

	TYP003_CURRENCYTYPE_EEK = 42;

	TYP003_CURRENCYTYPE_EGP = 43;

	TYP003_CURRENCYTYPE_ERN = 44;

	TYP003_CURRENCYTYPE_ETB = 45;

	TYP003_CURRENCYTYPE_EUR = 46;

	TYP003_CURRENCYTYPE_FJD = 47;

	TYP003_CURRENCYTYPE_FKP = 48;

	TYP003_CURRENCYTYPE_GBP = 49;

	TYP003_CURRENCYTYPE_GEL = 50;

	TYP003_CURRENCYTYPE_GGP = 51;

	TYP003_CURRENCYTYPE_GHC = 52;

	TYP003_CURRENCYTYPE_GIP = 53;

	TYP003_CURRENCYTYPE_GMD = 54;

	TYP003_CURRENCYTYPE_GNF = 55;

	TYP003_CURRENCYTYPE_GTQ = 56;

	TYP003_CURRENCYTYPE_GYD = 57;

	TYP003_CURRENCYTYPE_HKD = 58;

	TYP003_CURRENCYTYPE_HNL = 59;

	TYP003_CURRENCYTYPE_HRK = 60;

	TYP003_CURRENCYTYPE_HTG = 61;

	TYP003_CURRENCYTYPE_HUF = 62;

	TYP003_CURRENCYTYPE_IDR = 63;

	TYP003_CURRENCYTYPE_ILS = 64;

	TYP003_CURRENCYTYPE_IMP = 65;

	TYP003_CURRENCYTYPE_INR = 66;

	TYP003_CURRENCYTYPE_IQD = 67;

	TYP003_CURRENCYTYPE_IRR = 68;

	TYP003_CURRENCYTYPE_ISK = 69;

	TYP003_CURRENCYTYPE_JEP = 70;

	TYP003_CURRENCYTYPE_JMD = 71;

	TYP003_CURRENCYTYPE_JOD = 72;

	TYP003_CURRENCYTYPE_JPY = 73;

	TYP003_CURRENCYTYPE_KES = 74;

	TYP003_CURRENCYTYPE_KGS = 75;

	TYP003_CURRENCYTYPE_KHR = 76;

	TYP003_CURRENCYTYPE_KMF = 77;

	TYP003_CURRENCYTYPE_KPW = 78;

	TYP003_CURRENCYTYPE_KRW = 79;

	TYP003_CURRENCYTYPE_KWD = 80;

	TYP003_CURRENCYTYPE_KYD = 81;

	TYP003_CURRENCYTYPE_KZT = 82;

	TYP003_CURRENCYTYPE_LAK = 83;

	TYP003_CURRENCYTYPE_LBP = 84;

	TYP003_CURRENCYTYPE_LKR = 85;

	TYP003_CURRENCYTYPE_LRD = 86;

	TYP003_CURRENCYTYPE_LSL = 87;

	TYP003_CURRENCYTYPE_LTL = 88;

	TYP003_CURRENCYTYPE_LVL = 89;

	TYP003_CURRENCYTYPE_LYD = 90;

	TYP003_CURRENCYTYPE_MAD = 91;

	TYP003_CURRENCYTYPE_MDL = 92;

	TYP003_CURRENCYTYPE_MGA = 93;

	TYP003_CURRENCYTYPE_MKD = 94;

	TYP003_CURRENCYTYPE_MMK = 95;

	TYP003_CURRENCYTYPE_MNT = 96;

	TYP003_CURRENCYTYPE_MOP = 97;

	TYP003_CURRENCYTYPE_MRO = 98;

	TYP003_CURRENCYTYPE_MTL = 99;

	TYP003_CURRENCYTYPE_MUR = 100;

	TYP003_CURRENCYTYPE_MVR = 101;

	TYP003_CURRENCYTYPE_MWK = 102;

	TYP003_CURRENCYTYPE_MXN = 103;

	TYP003_CURRENCYTYPE_MYR = 104;

	TYP003_CURRENCYTYPE_MZM = 105;

	TYP003_CURRENCYTYPE_NAD = 106;

	TYP003_CURRENCYTYPE_NGN = 107;

	TYP003_CURRENCYTYPE_NIO = 108;

	TYP003_CURRENCYTYPE_NOK = 109;

	TYP003_CURRENCYTYPE_NPR = 110;

	TYP003_CURRENCYTYPE_NZD = 111;

	TYP003_CURRENCYTYPE_OMR = 112;

	TYP003_CURRENCYTYPE_PAB = 113;

	TYP003_CURRENCYTYPE_PEN = 114;

	TYP003_CURRENCYTYPE_PGK = 115;

	TYP003_CURRENCYTYPE_PHP = 116;

	TYP003_CURRENCYTYPE_PKR = 117;

	TYP003_CURRENCYTYPE_PLN = 118;

	TYP003_CURRENCYTYPE_PYG = 119;

	TYP003_CURRENCYTYPE_QAR = 120;

	TYP003_CURRENCYTYPE_ROL = 121;

	TYP003_CURRENCYTYPE_RUR = 122;

	TYP003_CURRENCYTYPE_RWF = 123;

	TYP003_CURRENCYTYPE_SAR = 124;

	TYP003_CURRENCYTYPE_SBD = 125;

	TYP003_CURRENCYTYPE_SCR = 126;

	TYP003_CURRENCYTYPE_SDD = 127;

	TYP003_CURRENCYTYPE_SEK = 128;

	TYP003_CURRENCYTYPE_SGD = 129;

	TYP003_CURRENCYTYPE_SHP = 130;

	TYP003_CURRENCYTYPE_SIT = 131;

	TYP003_CURRENCYTYPE_SKK = 132;

	TYP003_CURRENCYTYPE_SLL = 133;

	TYP003_CURRENCYTYPE_SOS = 134;

	TYP003_CURRENCYTYPE_SPL = 135;

	TYP003_CURRENCYTYPE_SRD = 136;

	TYP003_CURRENCYTYPE_STD = 137;

	TYP003_CURRENCYTYPE_SVC = 138;

	TYP003_CURRENCYTYPE_SYP = 139;

	TYP003_CURRENCYTYPE_SZL = 140;

	TYP003_CURRENCYTYPE_THB = 141;

	TYP003_CURRENCYTYPE_TJS = 142;

	TYP003_CURRENCYTYPE_TMM = 143;

	TYP003_CURRENCYTYPE_TND = 144;

	TYP003_CURRENCYTYPE_TOP = 145;

	TYP003_CURRENCYTYPE_TRL = 146;

	TYP003_CURRENCYTYPE_TTD = 147;

	TYP003_CURRENCYTYPE_TVD = 148;

	TYP003_CURRENCYTYPE_TWD = 149;

	TYP003_CURRENCYTYPE_TZS = 150;

	TYP003_CURRENCYTYPE_UAH = 151;

	TYP003_CURRENCYTYPE_UGX = 152;

	TYP003_CURRENCYTYPE_USD = 153;

	TYP003_CURRENCYTYPE_UYU = 154;

	TYP003_CURRENCYTYPE_UZS = 155;

	TYP003_CURRENCYTYPE_VEB = 156;

	TYP003_CURRENCYTYPE_VND = 157;

	TYP003_CURRENCYTYPE_VUV = 158;

	TYP003_CURRENCYTYPE_WST = 159;

	TYP003_CURRENCYTYPE_XAF = 160;

	TYP003_CURRENCYTYPE_XAG = 161;

	TYP003_CURRENCYTYPE_XAU = 162;

	TYP003_CURRENCYTYPE_XCD = 163;

	TYP003_CURRENCYTYPE_XDR = 164;

	TYP003_CURRENCYTYPE_XOF = 165;

	TYP003_CURRENCYTYPE_XPD = 166;

	TYP003_CURRENCYTYPE_XPF = 167;

	TYP003_CURRENCYTYPE_XPT = 168;

	TYP003_CURRENCYTYPE_YER = 169;

	TYP003_CURRENCYTYPE_ZAR = 170;

	TYP003_CURRENCYTYPE_ZMK = 171;

	TYP003_CURRENCYTYPE_ZWD = 172;

	TYP003_CURRENCYTYPE_UNDEFINED = 255;
}
// The numerical magnitude, or numag, table contains unsigned integer values in the range 0 to 3000000 with decreasing precision. The relationship between the table entry number and the value is described in TPEG-SSF Annex B [5].
// TODO: Convert the reference to a cite tag.
// TODO: Should we keep the reference to this annex or add the annex in the TYP document? The TYP document itself is an annex...
enum Typ004_NumericalMagnitude {

	TYP004_NUMERICALMAGNITUDE_0 = 0;

	TYP004_NUMERICALMAGNITUDE_1 = 1;

	TYP004_NUMERICALMAGNITUDE_2 = 2;

	TYP004_NUMERICALMAGNITUDE_3 = 3;

	TYP004_NUMERICALMAGNITUDE_4 = 4;

	TYP004_NUMERICALMAGNITUDE_5 = 5;

	TYP004_NUMERICALMAGNITUDE_6 = 6;

	TYP004_NUMERICALMAGNITUDE_7 = 7;

	TYP004_NUMERICALMAGNITUDE_8 = 8;

	TYP004_NUMERICALMAGNITUDE_9 = 9;

	TYP004_NUMERICALMAGNITUDE_10 = 10;

	TYP004_NUMERICALMAGNITUDE_11 = 11;

	TYP004_NUMERICALMAGNITUDE_12 = 12;

	TYP004_NUMERICALMAGNITUDE_13 = 13;

	TYP004_NUMERICALMAGNITUDE_14 = 14;

	TYP004_NUMERICALMAGNITUDE_15 = 15;

	TYP004_NUMERICALMAGNITUDE_16 = 16;

	TYP004_NUMERICALMAGNITUDE_17 = 17;

	TYP004_NUMERICALMAGNITUDE_18 = 18;

	TYP004_NUMERICALMAGNITUDE_19 = 19;

	TYP004_NUMERICALMAGNITUDE_20 = 20;

	TYP004_NUMERICALMAGNITUDE_21 = 21;

	TYP004_NUMERICALMAGNITUDE_22 = 22;

	TYP004_NUMERICALMAGNITUDE_23 = 23;

	TYP004_NUMERICALMAGNITUDE_24 = 24;

	TYP004_NUMERICALMAGNITUDE_25 = 25;

	TYP004_NUMERICALMAGNITUDE_26 = 26;

	TYP004_NUMERICALMAGNITUDE_27 = 27;

	TYP004_NUMERICALMAGNITUDE_28 = 28;

	TYP004_NUMERICALMAGNITUDE_29 = 29;

	TYP004_NUMERICALMAGNITUDE_30 = 30;

	TYP004_NUMERICALMAGNITUDE_31 = 31;

	TYP004_NUMERICALMAGNITUDE_32 = 32;

	TYP004_NUMERICALMAGNITUDE_33 = 33;

	TYP004_NUMERICALMAGNITUDE_34 = 34;

	TYP004_NUMERICALMAGNITUDE_35 = 35;

	TYP004_NUMERICALMAGNITUDE_36 = 36;

	TYP004_NUMERICALMAGNITUDE_37 = 37;

	TYP004_NUMERICALMAGNITUDE_38 = 38;

	TYP004_NUMERICALMAGNITUDE_39 = 39;

	TYP004_NUMERICALMAGNITUDE_40 = 40;

	TYP004_NUMERICALMAGNITUDE_41 = 41;

	TYP004_NUMERICALMAGNITUDE_42 = 42;

	TYP004_NUMERICALMAGNITUDE_43 = 43;

	TYP004_NUMERICALMAGNITUDE_44 = 44;

	TYP004_NUMERICALMAGNITUDE_45 = 45;

	TYP004_NUMERICALMAGNITUDE_46 = 46;

	TYP004_NUMERICALMAGNITUDE_47 = 47;

	TYP004_NUMERICALMAGNITUDE_48 = 48;

	TYP004_NUMERICALMAGNITUDE_49 = 49;

	TYP004_NUMERICALMAGNITUDE_50 = 50;

	TYP004_NUMERICALMAGNITUDE_60 = 51;

	TYP004_NUMERICALMAGNITUDE_70 = 52;

	TYP004_NUMERICALMAGNITUDE_80 = 53;

	TYP004_NUMERICALMAGNITUDE_90 = 54;

	TYP004_NUMERICALMAGNITUDE_100 = 55;

	TYP004_NUMERICALMAGNITUDE_110 = 56;

	TYP004_NUMERICALMAGNITUDE_120 = 57;

	TYP004_NUMERICALMAGNITUDE_130 = 58;

	TYP004_NUMERICALMAGNITUDE_140 = 59;

	TYP004_NUMERICALMAGNITUDE_150 = 60;

	TYP004_NUMERICALMAGNITUDE_160 = 61;

	TYP004_NUMERICALMAGNITUDE_170 = 62;

	TYP004_NUMERICALMAGNITUDE_180 = 63;

	TYP004_NUMERICALMAGNITUDE_190 = 64;

	TYP004_NUMERICALMAGNITUDE_200 = 65;

	TYP004_NUMERICALMAGNITUDE_210 = 66;

	TYP004_NUMERICALMAGNITUDE_220 = 67;

	TYP004_NUMERICALMAGNITUDE_230 = 68;

	TYP004_NUMERICALMAGNITUDE_240 = 69;

	TYP004_NUMERICALMAGNITUDE_250 = 70;

	TYP004_NUMERICALMAGNITUDE_260 = 71;

	TYP004_NUMERICALMAGNITUDE_270 = 72;

	TYP004_NUMERICALMAGNITUDE_280 = 73;

	TYP004_NUMERICALMAGNITUDE_290 = 74;

	TYP004_NUMERICALMAGNITUDE_300 = 75;

	TYP004_NUMERICALMAGNITUDE_310 = 76;

	TYP004_NUMERICALMAGNITUDE_320 = 77;

	TYP004_NUMERICALMAGNITUDE_330 = 78;

	TYP004_NUMERICALMAGNITUDE_340 = 79;

	TYP004_NUMERICALMAGNITUDE_350 = 80;

	TYP004_NUMERICALMAGNITUDE_360 = 81;

	TYP004_NUMERICALMAGNITUDE_370 = 82;

	TYP004_NUMERICALMAGNITUDE_380 = 83;

	TYP004_NUMERICALMAGNITUDE_390 = 84;

	TYP004_NUMERICALMAGNITUDE_400 = 85;

	TYP004_NUMERICALMAGNITUDE_410 = 86;

	TYP004_NUMERICALMAGNITUDE_420 = 87;

	TYP004_NUMERICALMAGNITUDE_430 = 88;

	TYP004_NUMERICALMAGNITUDE_440 = 89;

	TYP004_NUMERICALMAGNITUDE_450 = 90;

	TYP004_NUMERICALMAGNITUDE_460 = 91;

	TYP004_NUMERICALMAGNITUDE_470 = 92;

	TYP004_NUMERICALMAGNITUDE_480 = 93;

	TYP004_NUMERICALMAGNITUDE_490 = 94;

	TYP004_NUMERICALMAGNITUDE_500 = 95;

	TYP004_NUMERICALMAGNITUDE_600 = 96;

	TYP004_NUMERICALMAGNITUDE_700 = 97;

	TYP004_NUMERICALMAGNITUDE_800 = 98;

	TYP004_NUMERICALMAGNITUDE_900 = 99;

	TYP004_NUMERICALMAGNITUDE_1000 = 100;

	TYP004_NUMERICALMAGNITUDE_1100 = 101;

	TYP004_NUMERICALMAGNITUDE_1200 = 102;

	TYP004_NUMERICALMAGNITUDE_1300 = 103;

	TYP004_NUMERICALMAGNITUDE_1400 = 104;

	TYP004_NUMERICALMAGNITUDE_1500 = 105;

	TYP004_NUMERICALMAGNITUDE_1600 = 106;

	TYP004_NUMERICALMAGNITUDE_1700 = 107;

	TYP004_NUMERICALMAGNITUDE_1800 = 108;

	TYP004_NUMERICALMAGNITUDE_1900 = 109;

	TYP004_NUMERICALMAGNITUDE_2000 = 110;

	TYP004_NUMERICALMAGNITUDE_2100 = 111;

	TYP004_NUMERICALMAGNITUDE_2200 = 112;

	TYP004_NUMERICALMAGNITUDE_2300 = 113;

	TYP004_NUMERICALMAGNITUDE_2400 = 114;

	TYP004_NUMERICALMAGNITUDE_2500 = 115;

	TYP004_NUMERICALMAGNITUDE_2600 = 116;

	TYP004_NUMERICALMAGNITUDE_2700 = 117;

	TYP004_NUMERICALMAGNITUDE_2800 = 118;

	TYP004_NUMERICALMAGNITUDE_2900 = 119;

	TYP004_NUMERICALMAGNITUDE_3000 = 120;

	TYP004_NUMERICALMAGNITUDE_3100 = 121;

	TYP004_NUMERICALMAGNITUDE_3200 = 122;

	TYP004_NUMERICALMAGNITUDE_3300 = 123;

	TYP004_NUMERICALMAGNITUDE_3400 = 124;

	TYP004_NUMERICALMAGNITUDE_3500 = 125;

	TYP004_NUMERICALMAGNITUDE_3600 = 126;

	TYP004_NUMERICALMAGNITUDE_3700 = 127;

	TYP004_NUMERICALMAGNITUDE_3800 = 128;

	TYP004_NUMERICALMAGNITUDE_3900 = 129;

	TYP004_NUMERICALMAGNITUDE_4000 = 130;

	TYP004_NUMERICALMAGNITUDE_4100 = 131;

	TYP004_NUMERICALMAGNITUDE_4200 = 132;

	TYP004_NUMERICALMAGNITUDE_4300 = 133;

	TYP004_NUMERICALMAGNITUDE_4400 = 134;

	TYP004_NUMERICALMAGNITUDE_4500 = 135;

	TYP004_NUMERICALMAGNITUDE_4600 = 136;

	TYP004_NUMERICALMAGNITUDE_4700 = 137;

	TYP004_NUMERICALMAGNITUDE_4800 = 138;

	TYP004_NUMERICALMAGNITUDE_4900 = 139;

	TYP004_NUMERICALMAGNITUDE_5000 = 140;

	TYP004_NUMERICALMAGNITUDE_6000 = 141;

	TYP004_NUMERICALMAGNITUDE_7000 = 142;

	TYP004_NUMERICALMAGNITUDE_8000 = 143;

	TYP004_NUMERICALMAGNITUDE_9000 = 144;

	TYP004_NUMERICALMAGNITUDE_10000 = 145;

	TYP004_NUMERICALMAGNITUDE_11000 = 146;

	TYP004_NUMERICALMAGNITUDE_12000 = 147;

	TYP004_NUMERICALMAGNITUDE_13000 = 148;

	TYP004_NUMERICALMAGNITUDE_14000 = 149;

	TYP004_NUMERICALMAGNITUDE_15000 = 150;

	TYP004_NUMERICALMAGNITUDE_16000 = 151;

	TYP004_NUMERICALMAGNITUDE_17000 = 152;

	TYP004_NUMERICALMAGNITUDE_18000 = 153;

	TYP004_NUMERICALMAGNITUDE_19000 = 154;

	TYP004_NUMERICALMAGNITUDE_20000 = 155;

	TYP004_NUMERICALMAGNITUDE_21000 = 156;

	TYP004_NUMERICALMAGNITUDE_22000 = 157;

	TYP004_NUMERICALMAGNITUDE_23000 = 158;

	TYP004_NUMERICALMAGNITUDE_24000 = 159;

	TYP004_NUMERICALMAGNITUDE_25000 = 160;

	TYP004_NUMERICALMAGNITUDE_26000 = 161;

	TYP004_NUMERICALMAGNITUDE_27000 = 162;

	TYP004_NUMERICALMAGNITUDE_28000 = 163;

	TYP004_NUMERICALMAGNITUDE_29000 = 164;

	TYP004_NUMERICALMAGNITUDE_30000 = 165;

	TYP004_NUMERICALMAGNITUDE_31000 = 166;

	TYP004_NUMERICALMAGNITUDE_32000 = 167;

	TYP004_NUMERICALMAGNITUDE_33000 = 168;

	TYP004_NUMERICALMAGNITUDE_34000 = 169;

	TYP004_NUMERICALMAGNITUDE_35000 = 170;

	TYP004_NUMERICALMAGNITUDE_36000 = 171;

	TYP004_NUMERICALMAGNITUDE_37000 = 172;

	TYP004_NUMERICALMAGNITUDE_38000 = 173;

	TYP004_NUMERICALMAGNITUDE_39000 = 174;

	TYP004_NUMERICALMAGNITUDE_40000 = 175;

	TYP004_NUMERICALMAGNITUDE_41000 = 176;

	TYP004_NUMERICALMAGNITUDE_42000 = 177;

	TYP004_NUMERICALMAGNITUDE_43000 = 178;

	TYP004_NUMERICALMAGNITUDE_44000 = 179;

	TYP004_NUMERICALMAGNITUDE_45000 = 180;

	TYP004_NUMERICALMAGNITUDE_46000 = 181;

	TYP004_NUMERICALMAGNITUDE_47000 = 182;

	TYP004_NUMERICALMAGNITUDE_48000 = 183;

	TYP004_NUMERICALMAGNITUDE_49000 = 184;

	TYP004_NUMERICALMAGNITUDE_50000 = 185;

	TYP004_NUMERICALMAGNITUDE_60000 = 186;

	TYP004_NUMERICALMAGNITUDE_70000 = 187;

	TYP004_NUMERICALMAGNITUDE_80000 = 188;

	TYP004_NUMERICALMAGNITUDE_90000 = 189;

	TYP004_NUMERICALMAGNITUDE_100000 = 190;

	TYP004_NUMERICALMAGNITUDE_110000 = 191;

	TYP004_NUMERICALMAGNITUDE_120000 = 192;

	TYP004_NUMERICALMAGNITUDE_130000 = 193;

	TYP004_NUMERICALMAGNITUDE_140000 = 194;

	TYP004_NUMERICALMAGNITUDE_150000 = 195;

	TYP004_NUMERICALMAGNITUDE_160000 = 196;

	TYP004_NUMERICALMAGNITUDE_170000 = 197;

	TYP004_NUMERICALMAGNITUDE_180000 = 198;

	TYP004_NUMERICALMAGNITUDE_190000 = 199;

	TYP004_NUMERICALMAGNITUDE_200000 = 200;

	TYP004_NUMERICALMAGNITUDE_210000 = 201;

	TYP004_NUMERICALMAGNITUDE_220000 = 202;

	TYP004_NUMERICALMAGNITUDE_230000 = 203;

	TYP004_NUMERICALMAGNITUDE_240000 = 204;

	TYP004_NUMERICALMAGNITUDE_250000 = 205;

	TYP004_NUMERICALMAGNITUDE_260000 = 206;

	TYP004_NUMERICALMAGNITUDE_270000 = 207;

	TYP004_NUMERICALMAGNITUDE_280000 = 208;

	TYP004_NUMERICALMAGNITUDE_290000 = 209;

	TYP004_NUMERICALMAGNITUDE_300000 = 210;

	TYP004_NUMERICALMAGNITUDE_310000 = 211;

	TYP004_NUMERICALMAGNITUDE_320000 = 212;

	TYP004_NUMERICALMAGNITUDE_330000 = 213;

	TYP004_NUMERICALMAGNITUDE_340000 = 214;

	TYP004_NUMERICALMAGNITUDE_350000 = 215;

	TYP004_NUMERICALMAGNITUDE_360000 = 216;

	TYP004_NUMERICALMAGNITUDE_370000 = 217;

	TYP004_NUMERICALMAGNITUDE_380000 = 218;

	TYP004_NUMERICALMAGNITUDE_390000 = 219;

	TYP004_NUMERICALMAGNITUDE_400000 = 220;

	TYP004_NUMERICALMAGNITUDE_410000 = 221;

	TYP004_NUMERICALMAGNITUDE_420000 = 222;

	TYP004_NUMERICALMAGNITUDE_430000 = 223;

	TYP004_NUMERICALMAGNITUDE_440000 = 224;

	TYP004_NUMERICALMAGNITUDE_450000 = 225;

	TYP004_NUMERICALMAGNITUDE_460000 = 226;

	TYP004_NUMERICALMAGNITUDE_470000 = 227;

	TYP004_NUMERICALMAGNITUDE_480000 = 228;

	TYP004_NUMERICALMAGNITUDE_490000 = 229;

	TYP004_NUMERICALMAGNITUDE_500000 = 230;

	TYP004_NUMERICALMAGNITUDE_600000 = 231;

	TYP004_NUMERICALMAGNITUDE_700000 = 232;

	TYP004_NUMERICALMAGNITUDE_800000 = 233;

	TYP004_NUMERICALMAGNITUDE_900000 = 234;

	TYP004_NUMERICALMAGNITUDE_1000000 = 235;

	TYP004_NUMERICALMAGNITUDE_1100000 = 236;

	TYP004_NUMERICALMAGNITUDE_1200000 = 237;

	TYP004_NUMERICALMAGNITUDE_1300000 = 238;

	TYP004_NUMERICALMAGNITUDE_1400000 = 239;

	TYP004_NUMERICALMAGNITUDE_1500000 = 240;

	TYP004_NUMERICALMAGNITUDE_1600000 = 241;

	TYP004_NUMERICALMAGNITUDE_1700000 = 242;

	TYP004_NUMERICALMAGNITUDE_1800000 = 243;

	TYP004_NUMERICALMAGNITUDE_1900000 = 244;

	TYP004_NUMERICALMAGNITUDE_2000000 = 245;

	TYP004_NUMERICALMAGNITUDE_2100000 = 246;

	TYP004_NUMERICALMAGNITUDE_2200000 = 247;

	TYP004_NUMERICALMAGNITUDE_2300000 = 248;

	TYP004_NUMERICALMAGNITUDE_2400000 = 249;

	TYP004_NUMERICALMAGNITUDE_2500000 = 250;

	TYP004_NUMERICALMAGNITUDE_2600000 = 251;

	TYP004_NUMERICALMAGNITUDE_2700000 = 252;

	TYP004_NUMERICALMAGNITUDE_2800000 = 253;

	TYP004_NUMERICALMAGNITUDE_2900000 = 254;

	TYP004_NUMERICALMAGNITUDE_3000000 = 255;
}
// &lt;p&gt;
// This table lists countries as defined by ISO 3166-1. (Note: &lt;q&gt;undecodable country&lt;/q&gt; is to be used by a client device unable to read the typ005 code used by a service provider - no code value for this word is ever transmitted.) The comment column shows the corresponding ISO 3166-1-alpha-2 code elements.
// &lt;/p&gt;
enum Typ005_CountryCode {

	TYP005_COUNTRYCODE_UNKNOWN = 0;
	// AF
	TYP005_COUNTRYCODE_AFGHANISTAN = 1;
	// AX
	TYP005_COUNTRYCODE_LAND_ISLANDS = 2;
	// AL
	TYP005_COUNTRYCODE_ALBANIA = 3;
	// DZ
	TYP005_COUNTRYCODE_ALGERIA = 4;
	// AS
	TYP005_COUNTRYCODE_AMERICAN_SAMOA = 5;
	// AD
	TYP005_COUNTRYCODE_ANDORRA = 6;
	// AO
	TYP005_COUNTRYCODE_ANGOLA = 7;
	// AI
	TYP005_COUNTRYCODE_ANGUILLA = 8;
	// AQ
	TYP005_COUNTRYCODE_ANTARCTICA = 9;
	// AG
	TYP005_COUNTRYCODE_ANTIGUA_AND_BARBUDA = 10;
	// AR
	TYP005_COUNTRYCODE_ARGENTINA = 11;
	// AM
	TYP005_COUNTRYCODE_ARMENIA = 12;
	// AW
	TYP005_COUNTRYCODE_ARUBA = 13;
	// AU
	TYP005_COUNTRYCODE_AUSTRALIA = 14;
	// AT
	TYP005_COUNTRYCODE_AUSTRIA = 15;
	// AZ
	TYP005_COUNTRYCODE_AZERBAIJAN = 16;
	// BS
	TYP005_COUNTRYCODE_BAHAMAS = 17;
	// BH
	TYP005_COUNTRYCODE_BAHRAIN = 18;
	// BD
	TYP005_COUNTRYCODE_BANGLADESH = 19;
	// BB
	TYP005_COUNTRYCODE_BARBADOS = 20;
	// BY
	TYP005_COUNTRYCODE_BELARUS = 21;
	// BE
	TYP005_COUNTRYCODE_BELGIUM = 22;
	// BZ
	TYP005_COUNTRYCODE_BELIZE = 23;
	// BJ
	TYP005_COUNTRYCODE_BENIN = 24;
	// BM
	TYP005_COUNTRYCODE_BERMUDA = 25;
	// BT
	TYP005_COUNTRYCODE_BHUTAN = 26;
	// BO
	TYP005_COUNTRYCODE_BOLIVIA = 27;
	// BA
	TYP005_COUNTRYCODE_BOSNIA_AND_HERZEGOVINA = 28;
	// BW
	TYP005_COUNTRYCODE_BOTSWANA = 29;
	// BV
	TYP005_COUNTRYCODE_BOUVET_ISLAND = 30;
	// BR
	TYP005_COUNTRYCODE_BRAZIL = 31;
	// IO
	TYP005_COUNTRYCODE_BRITISH_INDIAN_OCEAN_TERRITORY = 32;
	// BN
	TYP005_COUNTRYCODE_BRUNEI_DARUSSALAM = 33;
	// BG
	TYP005_COUNTRYCODE_BULGARIA = 34;
	// BF
	TYP005_COUNTRYCODE_BURKINA_FASO = 35;
	// BI
	TYP005_COUNTRYCODE_BURUNDI = 36;
	// KH
	TYP005_COUNTRYCODE_CAMBODIA = 37;
	// CM
	TYP005_COUNTRYCODE_CAMEROON = 38;
	// CA
	TYP005_COUNTRYCODE_CANADA = 39;
	// CV
	TYP005_COUNTRYCODE_CAPE_VERDE = 40;
	// KY
	TYP005_COUNTRYCODE_CAYMAN_ISLANDS = 41;
	// CF
	TYP005_COUNTRYCODE_CENTRAL_AFRICAN_REPUBLIC = 42;
	// TD
	TYP005_COUNTRYCODE_CHAD = 43;
	// CL
	TYP005_COUNTRYCODE_CHILE = 44;
	// CN
	TYP005_COUNTRYCODE_CHINA = 45;
	// CX
	TYP005_COUNTRYCODE_CHRISTMAS_ISLAND = 46;
	// CC
	TYP005_COUNTRYCODE_COCOS_KEELING_ISLANDS = 47;
	// CO
	TYP005_COUNTRYCODE_COLOMBIA = 48;
	// KM
	TYP005_COUNTRYCODE_COMOROS = 49;
	// CG
	TYP005_COUNTRYCODE_CONGO = 50;
	// CD
	TYP005_COUNTRYCODE_CONGO_THE_DEMOCRATIC_REPUBLIC_OF_THE = 51;
	// CK
	TYP005_COUNTRYCODE_COOK_ISLANDS = 52;
	// CR
	TYP005_COUNTRYCODE_COSTA_RICA = 53;
	// CI
	TYP005_COUNTRYCODE_CTE_DIVOIRE = 54;
	// HR
	TYP005_COUNTRYCODE_CROATIA = 55;
	// CU
	TYP005_COUNTRYCODE_CUBA = 56;
	// CY
	TYP005_COUNTRYCODE_CYPRUS = 57;
	// CZ
	TYP005_COUNTRYCODE_CZECH_REPUBLIC = 58;
	// DK
	TYP005_COUNTRYCODE_DENMARK = 59;
	// DJ
	TYP005_COUNTRYCODE_DJIBOUTI = 60;
	// DM
	TYP005_COUNTRYCODE_DOMINICA = 61;
	// DO
	TYP005_COUNTRYCODE_DOMINICAN_REPUBLIC = 62;
	// EC
	TYP005_COUNTRYCODE_ECUADOR = 63;
	// EG
	TYP005_COUNTRYCODE_EGYPT = 64;
	// SV
	TYP005_COUNTRYCODE_EL_SALVADOR = 65;
	// GQ
	TYP005_COUNTRYCODE_EQUATORIAL_GUINEA = 66;
	// ER
	TYP005_COUNTRYCODE_ERITREA = 67;
	// EE
	TYP005_COUNTRYCODE_ESTONIA = 68;
	// ET
	TYP005_COUNTRYCODE_ETHIOPIA = 69;
	// FK
	TYP005_COUNTRYCODE_FALKLAND_ISLANDS_MALVINAS = 70;
	// FO
	TYP005_COUNTRYCODE_FAROE_ISLANDS = 71;
	// FJ
	TYP005_COUNTRYCODE_FIJI = 72;
	// FI
	TYP005_COUNTRYCODE_FINLAND = 73;
	// FR
	TYP005_COUNTRYCODE_FRANCE = 74;
	// GF
	TYP005_COUNTRYCODE_FRENCH_GUIANA = 75;
	// PF
	TYP005_COUNTRYCODE_FRENCH_POLYNESIA = 76;
	// TF
	TYP005_COUNTRYCODE_FRENCH_SOUTHERN_TERRITORIES = 77;
	// GA
	TYP005_COUNTRYCODE_GABON = 78;
	// GM
	TYP005_COUNTRYCODE_GAMBIA = 79;
	// GE
	TYP005_COUNTRYCODE_GEORGIA = 80;
	// DE
	TYP005_COUNTRYCODE_GERMANY = 81;
	// GH
	TYP005_COUNTRYCODE_GHANA = 82;
	// GI
	TYP005_COUNTRYCODE_GIBRALTAR = 83;
	// GR
	TYP005_COUNTRYCODE_GREECE = 84;
	// GL
	TYP005_COUNTRYCODE_GREENLAND = 85;
	// GD
	TYP005_COUNTRYCODE_GRENADA = 86;
	// GP
	TYP005_COUNTRYCODE_GUADELOUPE = 87;
	// GU
	TYP005_COUNTRYCODE_GUAM = 88;
	// GT
	TYP005_COUNTRYCODE_GUATEMALA = 89;
	// GG
	TYP005_COUNTRYCODE_GUERNSEY = 90;
	// GN
	TYP005_COUNTRYCODE_GUINEA = 91;
	// GW
	TYP005_COUNTRYCODE_GUINEA_BISSAU = 92;
	// GY
	TYP005_COUNTRYCODE_GUYANA = 93;
	// HT
	TYP005_COUNTRYCODE_HAITI = 94;
	// HM
	TYP005_COUNTRYCODE_HEARD_ISLAND_AND_MCDONALD_ISLANDS = 95;
	// VA
	TYP005_COUNTRYCODE_HOLY_SEE_VATICAN_CITY_STATE = 96;
	// HN
	TYP005_COUNTRYCODE_HONDURAS = 97;
	// HK
	TYP005_COUNTRYCODE_HONG_KONG = 98;
	// HU
	TYP005_COUNTRYCODE_HUNGARY = 99;
	// IS
	TYP005_COUNTRYCODE_ICELAND = 100;
	// IN
	TYP005_COUNTRYCODE_INDIA = 101;
	// ID
	TYP005_COUNTRYCODE_INDONESIA = 102;
	// IR
	TYP005_COUNTRYCODE_IRAN_ISLAMIC_REPUBLIC_OF = 103;
	// IQ
	TYP005_COUNTRYCODE_IRAQ = 104;
	// IE
	TYP005_COUNTRYCODE_IRELAND = 105;
	// IM
	TYP005_COUNTRYCODE_ISLE_OF_MAN = 106;
	// IL
	TYP005_COUNTRYCODE_ISRAEL = 107;
	// IT
	TYP005_COUNTRYCODE_ITALY = 108;
	// JM
	TYP005_COUNTRYCODE_JAMAICA = 109;
	// JP
	TYP005_COUNTRYCODE_JAPAN = 110;
	// JE
	TYP005_COUNTRYCODE_JERSEY = 111;
	// JO
	TYP005_COUNTRYCODE_JORDAN = 112;
	// KZ
	TYP005_COUNTRYCODE_KAZAKHSTAN = 113;
	// KE
	TYP005_COUNTRYCODE_KENYA = 114;
	// KI
	TYP005_COUNTRYCODE_KIRIBATI = 115;
	// KP
	TYP005_COUNTRYCODE_KOREA_DEMOCRATIC_PEOPLES_REPUBLIC_OF = 116;
	// KR
	TYP005_COUNTRYCODE_KOREA_REPUBLIC_OF = 117;
	// KW
	TYP005_COUNTRYCODE_KUWAIT = 118;
	// KG
	TYP005_COUNTRYCODE_KYRGYZSTAN = 119;
	// LA
	TYP005_COUNTRYCODE_LAO_PEOPLES_DEMOCRATIC_REPUBLIC = 120;
	// LV
	TYP005_COUNTRYCODE_LATVIA = 121;
	// LB
	TYP005_COUNTRYCODE_LEBANON = 122;
	// LS
	TYP005_COUNTRYCODE_LESOTHO = 123;
	// LR
	TYP005_COUNTRYCODE_LIBERIA = 124;
	// LY
	TYP005_COUNTRYCODE_LIBYAN_ARAB_JAMAHIRIYA = 125;
	// LI
	TYP005_COUNTRYCODE_LIECHTENSTEIN = 126;
	// LT
	TYP005_COUNTRYCODE_LITHUANIA = 127;
	// LU
	TYP005_COUNTRYCODE_LUXEMBOURG = 128;
	// MO
	TYP005_COUNTRYCODE_MACAO = 129;
	// MK
	TYP005_COUNTRYCODE_MACEDONIA_THE_FORMER_YUGOSLAV_REPUBLIC_OF = 130;
	// MG
	TYP005_COUNTRYCODE_MADAGASCAR = 131;
	// MW
	TYP005_COUNTRYCODE_MALAWI = 132;
	// MY
	TYP005_COUNTRYCODE_MALAYSIA = 133;
	// MV
	TYP005_COUNTRYCODE_MALDIVES = 134;
	// ML
	TYP005_COUNTRYCODE_MALI = 135;
	// MT
	TYP005_COUNTRYCODE_MALTA = 136;
	// MH
	TYP005_COUNTRYCODE_MARSHALL_ISLANDS = 137;
	// MQ
	TYP005_COUNTRYCODE_MARTINIQUE = 138;
	// MR
	TYP005_COUNTRYCODE_MAURITANIA = 139;
	// MU
	TYP005_COUNTRYCODE_MAURITIUS = 140;
	// YT
	TYP005_COUNTRYCODE_MAYOTTE = 141;
	// MX
	TYP005_COUNTRYCODE_MEXICO = 142;
	// FM
	TYP005_COUNTRYCODE_MICRONESIA_FEDERATED_STATES_OF = 143;
	// MD
	TYP005_COUNTRYCODE_MOLDOVA_REPUBLIC_OF = 144;
	// MC
	TYP005_COUNTRYCODE_MONACO = 145;
	// MN
	TYP005_COUNTRYCODE_MONGOLIA = 146;
	// ME
	TYP005_COUNTRYCODE_MONTENEGRO = 147;
	// MS
	TYP005_COUNTRYCODE_MONTSERRAT = 148;
	// MA
	TYP005_COUNTRYCODE_MOROCCO = 149;
	// MZ
	TYP005_COUNTRYCODE_MOZAMBIQUE = 150;
	// MM
	TYP005_COUNTRYCODE_MYANMAR = 151;
	// NA
	TYP005_COUNTRYCODE_NAMIBIA = 152;
	// NR
	TYP005_COUNTRYCODE_NAURU = 153;
	// NP
	TYP005_COUNTRYCODE_NEPAL = 154;
	// NL
	TYP005_COUNTRYCODE_NETHERLANDS = 155;
	// AN
	TYP005_COUNTRYCODE_NETHERLANDS_ANTILLES = 156;
	// NC
	TYP005_COUNTRYCODE_NEW_CALEDONIA = 157;
	// NZ
	TYP005_COUNTRYCODE_NEW_ZEALAND = 158;
	// NI
	TYP005_COUNTRYCODE_NICARAGUA = 159;
	// NE
	TYP005_COUNTRYCODE_NIGER = 160;
	// NG
	TYP005_COUNTRYCODE_NIGERIA = 161;
	// NU
	TYP005_COUNTRYCODE_NIUE = 162;
	// NF
	TYP005_COUNTRYCODE_NORFOLK_ISLAND = 163;
	// MP
	TYP005_COUNTRYCODE_NORTHERN_MARIANA_ISLANDS = 164;
	// NO
	TYP005_COUNTRYCODE_NORWAY = 165;
	// OM
	TYP005_COUNTRYCODE_OMAN = 166;
	// PK
	TYP005_COUNTRYCODE_PAKISTAN = 167;
	// PW
	TYP005_COUNTRYCODE_PALAU = 168;
	// PS
	TYP005_COUNTRYCODE_PALESTINIAN_TERRITORY_OCCUPIED = 169;
	// PA
	TYP005_COUNTRYCODE_PANAMA = 170;
	// PG
	TYP005_COUNTRYCODE_PAPUA_NEW_GUINEA = 171;
	// PY
	TYP005_COUNTRYCODE_PARAGUAY = 172;
	// PE
	TYP005_COUNTRYCODE_PERU = 173;
	// PH
	TYP005_COUNTRYCODE_PHILIPPINES = 174;
	// PN
	TYP005_COUNTRYCODE_PITCAIRN = 175;
	// PL
	TYP005_COUNTRYCODE_POLAND = 176;
	// PT
	TYP005_COUNTRYCODE_PORTUGAL = 177;
	// PR
	TYP005_COUNTRYCODE_PUERTO_RICO = 178;
	// QA
	TYP005_COUNTRYCODE_QATAR = 179;
	// RE
	TYP005_COUNTRYCODE_RUNION = 180;
	// RO
	TYP005_COUNTRYCODE_ROMANIA = 181;
	// RU
	TYP005_COUNTRYCODE_RUSSIAN_FEDERATION = 182;
	// RW
	TYP005_COUNTRYCODE_RWANDA = 183;
	// SH
	TYP005_COUNTRYCODE_SAINT_HELENA = 184;
	// KN
	TYP005_COUNTRYCODE_SAINT_KITTS_AND_NEVIS = 185;
	// LC
	TYP005_COUNTRYCODE_SAINT_LUCIA = 186;
	// PM
	TYP005_COUNTRYCODE_SAINT_PIERRE_AND_MIQUELON = 187;
	// VC
	TYP005_COUNTRYCODE_SAINT_VINCENT_AND_THE_GRENADINES = 188;
	// WS
	TYP005_COUNTRYCODE_SAMOA = 189;
	// SM
	TYP005_COUNTRYCODE_SAN_MARINO = 190;
	// ST
	TYP005_COUNTRYCODE_SAO_TOME_AND_PRINCIPE = 191;
	// SA
	TYP005_COUNTRYCODE_SAUDI_ARABIA = 192;
	// SN
	TYP005_COUNTRYCODE_SENEGAL = 193;
	// RS
	TYP005_COUNTRYCODE_SERBIA = 194;
	// SC
	TYP005_COUNTRYCODE_SEYCHELLES = 195;
	// SL
	TYP005_COUNTRYCODE_SIERRA_LEONE = 196;
	// SG
	TYP005_COUNTRYCODE_SINGAPORE = 197;
	// SK
	TYP005_COUNTRYCODE_SLOVAKIA = 198;
	// SI
	TYP005_COUNTRYCODE_SLOVENIA = 199;
	// SB
	TYP005_COUNTRYCODE_SOLOMON_ISLANDS = 200;
	// SO
	TYP005_COUNTRYCODE_SOMALIA = 201;
	// ZA
	TYP005_COUNTRYCODE_SOUTH_AFRICA = 202;
	// GS
	TYP005_COUNTRYCODE_SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS = 203;
	// ES
	TYP005_COUNTRYCODE_SPAIN = 204;
	// LK
	TYP005_COUNTRYCODE_SRI_LANKA = 205;
	// SD
	TYP005_COUNTRYCODE_SUDAN = 206;
	// SR
	TYP005_COUNTRYCODE_SURINAME = 207;
	// SJ
	TYP005_COUNTRYCODE_SVALBARD_AND_JAN_MAYEN = 208;
	// SZ
	TYP005_COUNTRYCODE_SWAZILAND = 209;
	// SE
	TYP005_COUNTRYCODE_SWEDEN = 210;
	// CH
	TYP005_COUNTRYCODE_SWITZERLAND = 211;
	// SY
	TYP005_COUNTRYCODE_SYRIAN_ARAB_REPUBLIC = 212;
	// TW
	TYP005_COUNTRYCODE_TAIWAN_PROVINCE_OF_CHINA = 213;
	// TJ
	TYP005_COUNTRYCODE_TAJIKISTAN = 214;
	// TZ
	TYP005_COUNTRYCODE_TANZANIA_UNITED_REPUBLIC_OF = 215;
	// TH
	TYP005_COUNTRYCODE_THAILAND = 216;
	// TL
	TYP005_COUNTRYCODE_TIMOR_LESTE = 217;
	// TG
	TYP005_COUNTRYCODE_TOGO = 218;
	// TK
	TYP005_COUNTRYCODE_TOKELAU = 219;
	// TO
	TYP005_COUNTRYCODE_TONGA = 220;
	// TT
	TYP005_COUNTRYCODE_TRINIDAD_AND_TOBAGO = 221;
	// TN
	TYP005_COUNTRYCODE_TUNISIA = 222;
	// TR
	TYP005_COUNTRYCODE_TURKEY = 223;
	// TM
	TYP005_COUNTRYCODE_TURKMENISTAN = 224;
	// TC
	TYP005_COUNTRYCODE_TURKS_AND_CAICOS_ISLANDS = 225;
	// TV
	TYP005_COUNTRYCODE_TUVALU = 226;
	// UG
	TYP005_COUNTRYCODE_UGANDA = 227;
	// UA
	TYP005_COUNTRYCODE_UKRAINE = 228;
	// AE
	TYP005_COUNTRYCODE_UNITED_ARAB_EMIRATES = 229;
	// GB
	TYP005_COUNTRYCODE_UNITED_KINGDOM = 230;
	// US
	TYP005_COUNTRYCODE_UNITED_STATES = 231;
	// UM
	TYP005_COUNTRYCODE_UNITED_STATES_MINOR_OUTLYING_ISLANDS = 232;
	// UY
	TYP005_COUNTRYCODE_URUGUAY = 233;
	// UZ
	TYP005_COUNTRYCODE_UZBEKISTAN = 234;
	// VU
	TYP005_COUNTRYCODE_VANUATU = 235;
	// VE
	TYP005_COUNTRYCODE_VENEZUELA = 236;
	// VN
	TYP005_COUNTRYCODE_VIET_NAM = 237;
	// VG
	TYP005_COUNTRYCODE_VIRGIN_ISLANDS_BRITISH = 238;
	// VI
	TYP005_COUNTRYCODE_VIRGIN_ISLANDS_US = 239;
	// WF
	TYP005_COUNTRYCODE_WALLIS_AND_FUTUNA = 240;
	// EH
	TYP005_COUNTRYCODE_WESTERN_SAHARA = 241;
	// YE
	TYP005_COUNTRYCODE_YEMEN = 242;
	// ZM
	TYP005_COUNTRYCODE_ZAMBIA = 243;
	// ZW
	TYP005_COUNTRYCODE_ZIMBABWE = 244;
}
// This is the table of values of the compass orientation used in TPEG.
enum Typ006_OrientationType {
	// Service provider does not know at time of message generation
	TYP006_ORIENTATIONTYPE_UNKNOWN_COMPASS_ORIENTATION = 0;

	TYP006_ORIENTATIONTYPE_NORTH = 1;

	TYP006_ORIENTATIONTYPE_NORTH_EAST = 2;

	TYP006_ORIENTATIONTYPE_EAST = 3;

	TYP006_ORIENTATIONTYPE_SOUTH_EAST = 4;

	TYP006_ORIENTATIONTYPE_SOUTH = 5;

	TYP006_ORIENTATIONTYPE_SOUTH_WEST = 6;

	TYP006_ORIENTATIONTYPE_WEST = 7;

	TYP006_ORIENTATIONTYPE_NORTH_WEST = 8;
}
// This is the table of values of the priority of messages.
enum Typ007_Priority {

	TYP007_PRIORITY_UNDEFINED = 0;
	// Decoding of this message can be delayed
	// if resources in the receiver are limited or
	// overloaded.
	TYP007_PRIORITY_LOW = 1;

	TYP007_PRIORITY_MEDIUM = 2;
	// This message should be decoded as soon
	// as possible.
	TYP007_PRIORITY_HIGH = 3;
}
// This is the table used for representing optional Booleans.
enum Typ008_OptionalBoolean {

	TYP008_OPTIONALBOOLEAN_UNDEFINED = 0;

	TYP008_OPTIONALBOOLEAN_TRUE = 1;

	TYP008_OPTIONALBOOLEAN_FALSE = 2;
}
